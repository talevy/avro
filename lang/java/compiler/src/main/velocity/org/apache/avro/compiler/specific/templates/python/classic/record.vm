##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
from avro.io import validate
from avro.schema import parse


class ${this.mangle($schema.getName())}(dict):
    _schema = parse('''${this.mangle($schema.toString())}''')

    @classmethod
    def typecheck(cls, attr, value):
        '''
        Given an attribute and value, returns True iff this class's schema
        includes that attribute and the value is of the attribute's specified type.
        '''
        field = cls._schema.fields_dict.get(attr)
        return field and validate(field.type, value)

    @classmethod
    def is_valid(cls, attributes):
        return all(cls.typecheck(k, v) for k, v in attributes.items())

#if ($schema.getFields().size() > 0)
    def __init__(self, #foreach($field in $schema.getFields())${this.mangle($field.name())}=None#if($velocityCount < $schema.getFields().size()), #end#end):
#foreach ($field in $schema.getFields())
        self['$field.name()'] = ${this.mangle($field.name())}
#end
#end
#foreach ($field in $schema.getFields())

    @property
    def ${this.mangle($field.name(), $schema.isError())}(self):
        return self['$field.name()']

    @${this.mangle($field.name(), $schema.isError())}.setter
    def ${this.mangle($field.name(), $schema.isError())}(self, value):
        if ${this.mangle($schema.getName())}.typecheck('$field.name()', value):
            self['$field.name()'] = value
        else:
            raise TypeError("cannot set $field.name() to " + repr(type(value)) + ", expecting: ${this.pythonType($field.schema())}")
#end
