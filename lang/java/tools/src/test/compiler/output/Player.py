#
# Autogenerated by Avro
#
#DO NOT EDIT DIRECTLY
#
from avro.io import validate
from avro.schema import parse


class Player(dict):
    _schema = parse('''{"type":"record","name":"Player","namespace":"avro.examples.baseball","fields":[{"name":"number","type":"int"},{"name":"first_name","type":"string"},{"name":"last_name","type":"string"},{"name":"position","type":{"type":"array","items":{"type":"enum","name":"Position","symbols":["P","C","B1","B2","B3","SS","LF","CF","RF","DH"]}}}]}''')

    @classmethod
    def typecheck(cls, attr, value):
        '''
        Given an attribute and value, returns True iff this class's schema
        includes that attribute and the value is of the attribute's specified type.
        '''
        field = cls._schema.fields_dict.get(attr)
        return field and validate(field.type, value)

    @classmethod
    def is_valid(cls, attributes):
        return all(cls.typecheck(k, v) for k, v in attributes.items())

    def __init__(self, number=None, first_name=None, last_name=None, position=None):
        self['number'] = number
        self['first_name'] = first_name
        self['last_name'] = last_name
        self['position'] = position

    @property
    def number(self):
        return self['number']

    @number.setter
    def number(self, value):
        if Player.typecheck('number', value):
            self['number'] = value
        else:
            raise TypeError("cannot set number to " + repr(type(value)) + ", expecting int")

    @property
    def first_name(self):
        return self['first_name']

    @first_name.setter
    def first_name(self, value):
        if Player.typecheck('first_name', value):
            self['first_name'] = value
        else:
            raise TypeError("cannot set first_name to " + repr(type(value)) + ", expecting str")

    @property
    def last_name(self):
        return self['last_name']

    @last_name.setter
    def last_name(self, value):
        if Player.typecheck('last_name', value):
            self['last_name'] = value
        else:
            raise TypeError("cannot set last_name to " + repr(type(value)) + ", expecting str")

    @property
    def position(self):
        return self['position']

    @position.setter
    def position(self, value):
        if Player.typecheck('position', value):
            self['position'] = value
        else:
            raise TypeError("cannot set position to " + repr(type(value)) + ", expecting list of avro.examples.baseball.Position")
